函数式编程
1. 定义：用一系列函数解决问题。
    --函数可以赋值给变量，赋值后变量绑定函数。
    --允许将函数作为参数传入另一个函数。
    --允许函数返回一个函数。
2. 高阶函数：将函数作为参数返回值的函数。

函数作为参数：将函数作为参数传入，使该方法的适用性更广，体现了面向对象的开闭原则。

lambda表达式
1. 定义：一种匿名方法。
2. 作用：作为参数传递时语法简洁，优雅，代码可读性强。
        随时创建和销毁，减少程序耦合度。
3. 语法：
    --定义：
        变量 = lambda 形参：方法体
    --调用：
        变量（实参）
4. 说明：
    --形参没有可以不填
    --方法体只能有一条语句，且不支持赋值语句

day16 作业：
目标1：熟练应用ListHelper
    --创建敌人类（编号/姓名/攻击力/血量/攻击速度）
    --创建敌人列表
练习：
    1. 查找所有血量为0的人
    2. 查找所有血量大于0的人
    3. 计算所有攻击力的总和
    4. 查找编号是101的敌人
    5. 查找攻击速度在5到10之间的敌人
    6. 查找所有敌人的姓名
目标2：可以在实际项目中灵活应用函数式编程思想
解决的问题：获取满足条件的最后一个对象。
    获取最后1个血量大于0的敌人
    获取攻击速度大于5的最后一个敌人

解决的问题：获取满条件的对象总数
    获取生命值大于0的敌人总数
    获取攻击速度小于20的敌人总数

解决的问题：判断列表中是否包含某个元素
    判断列表中是否存在生命值为0的敌人
    判断列表中是否存在攻击速度小于20的敌人
