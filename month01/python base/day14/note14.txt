Review 13
Package 包
    定义：将模块以文件夹的形式进行分组管理。
    作用：让一些相关的模块组织在一起，使逻辑结构更加清晰。
    导入：
        from package import module [as alias]
        from package.sub_package import module [as alias]
        from package.sub_package.module import member [as alias]

        # 导入包内所有子包和模块
        from package import *
        from package.module import *

    搜索顺序：
        sys.path 提供的路径

练习1：目标 -- 在实际项目结构中，随心所欲地调用不同模块的成员。
    1.建相应的包与模块
    2.在相应模块找那个定义函数/类
    3.在main中调用skill_manager模块中的成员
    4.在skill_manager模块中，调用skill_deployer模块成员
    5.在skill_data模块中，调用list_helper模块成员。
        my_project/
            main.py
            common/
                __init__.py
                double_list_helper.py
                list_helper.py
            skill_system/
                __init__.py
                skill_data.py
                skill_deployer.py
                skill_manager.py


搜索顺序
    搜索内建模块（builtins）
    sys.path存储的是解释器导入模块时的路径。

练习2：创建如下结构：
project
    package01
        -- m01.py
        -- exercise01.py
    main.py
在exercise01.py中调用m01模块的成员。
测试：在main中开始运行，在exercise01中开始运行。
要求：使用终端。

异常处理 Error
异常
    1. 定义：运行时检测到的错误。
    2. 现象：当异常发生时，程序不会再向下执行，而转到函数的调用语句。
    3. 常见的异常类型：
        --名称异常（NameError）：变量未定义。
        --类型异常（TypeError）：不同数据类型进行运算。
        --索引异常（IndexError）：超出索引范围。
        --属性异常（AttributeError）：对象没有对应名称的属性。
        --键异常（KeyError）：没有对应名称的键。
        --未实现异常（NotImplementError）：尚未实现的方法
        --异常基类Exception。

处理
    1. 语法：
        try:
            可能出现异常的语句
        except 错误类型1 [as 变量1]
            处理语句1
        except 错误类型2 [as 变量1]
            处理语句2
        else:
            未发生异常的语句
        finally：
            无论是否发生异常，都执行的语句。
    2. 作用：将程序由异常状态转为正常流程。
    3. 说明：
        as子句是用于绑定错误对象的变量，可以省略。
        except子句可以有一个或者多个，用来捕捉某种类型的错误。
        else子句最多只能有一个。
        finally子句最多只能有一个，如果没有except子句，必须存在。
        如果异常没有被捕捉到，会向上层（调用处）继续传递，直到程序退出执行。

# 练习3：定义方法，在控制台中获取成绩int（1-100之间）
# 要求：如果输入有误，重新输入：

raise 语句
    1. 作用：抛出一个错误，让程序进入异常状态。
    2. 目的：在程序调用层数较深时，向主调函数传递错误，

自定义异常
    1. 定义：
        class 类名 Error(Exception):
            def __init__(self, 参数):
                super().__init__(参数)
                self.数据=参数
    2. 调用：
        try:
            ...
            raise 自定义异常类名（参数）
            ...
        except 定义异常类 as 变量名：
            变量名.数据
    3. 作用：封装错误信息