1. 封装
    数据角度：将基本数据类型组合成一个自定义数据类型。
    行为角度：向类外提供一组方法集合，隐藏方法的实现细节。
    设计角度：
        --分而治之
        --封装变化
            将变化的地方单独封装成为一个类，避免影响其他类
        --高内聚
            类中各个方法都在完成一项任务（单一职责类）
        --低耦合
            类与类之间的关联性和依赖度要低（每个类独立），让一个类独立与其他类。
        例如：最高的内聚莫过于类中仅包含一个方法，将会导致高内聚高耦合。
             最低的耦合莫过于类中包含所有方法，将会导致低耦合低内聚。
    作用：
        --简化编程，使用者不必了解具体的实现细节
        --松散耦合，降低了程序各部分之间的依赖性
        --数据和操作相关性，方法操作的是自己的数据


# 练习1；小明在招商银行取钱。

2. MVC
    --数据模型类Model：负责处理界面逻辑，比如显示菜单，获取输入，显示结果
    --界面视图类View：负责处理业务逻辑，不如添加、删除等操作
    --逻辑控制类Controller：定义需要处理的数据类型，比如学生信息。


    数据模型类：StudentModel
        数据：编号id，姓名name，年龄age，成绩score
    逻辑控制类：StudentManagerController
        数据：学生列表__stu_list
        行为：获取列表stu_list，添加学生add_student,删除学生delete_student，修改学生update_student，根据成绩排序order_by_score.
    界面视图类：StudentManagerView
        数据：逻辑控制对象__manager
        行为：显示菜单__display_menu,选择菜单__select_menu,

# 练习2：创建学生数据模型类
# 练习3：创建逻辑控制类
    数据：学生列表 __stu_list
    行为：获取列表的只读属性 stu_list, 添加学生方法add_student